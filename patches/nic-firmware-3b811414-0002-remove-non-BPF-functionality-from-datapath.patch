From fd812267d44de2f8c0317b7c9375c06142ee43b7 Mon Sep 17 00:00:00 2001
From: Johannes Krude <johannes.krude@comsys.rwth-aachen.de>
Date: Wed, 3 Jun 2020 22:58:47 +0200
Subject: [PATCH 2/3] remove non BPF functionality from datapath

---
 firmware/apps/nic/Makefile            |   2 +-
 firmware/apps/nic/app_config_tables.c |  36 +++---
 firmware/apps/nic/ebpf.uc             |  42 +++----
 firmware/apps/nic/pv.uc               | 152 +++++++++++++-------------
 4 files changed, 119 insertions(+), 113 deletions(-)

diff --git a/firmware/apps/nic/Makefile b/firmware/apps/nic/Makefile
index c630d20..0a52398 100644
--- a/firmware/apps/nic/Makefile
+++ b/firmware/apps/nic/Makefile
@@ -422,7 +422,7 @@ $(eval $(call nffw.add_obj_codeless,$(PROJECT),nfd_tlv_init))
 # Link stage
 # Write the build info and then the firmware ID to the MIP (one overrides the other in the MIP)
 $(eval $(call nffw.add_link_flag,$(PROJECT),$(shell $(SCRIPT_DIR)/describe-head.sh --nfld_args $(FLAVOR))))
-$(eval $(call nffw.add_rtsyms,$(PROJECT),$(shell $(SCRIPT_DIR)/describe-head.sh --fw_id $(FLAVOR))wpi$(WORKERS_PER_ISLAND)))
+$(eval $(call nffw.add_rtsyms,$(PROJECT),$(shell $(SCRIPT_DIR)/describe-head.sh --fw_id $(FLAVOR)X)wpi$(WORKERS_PER_ISLAND)))
 # TODO get link_w_analysis to work without adding a warning
 $(eval $(call nffw.add_link_flag,$(PROJECT),-codeshare $(APP_MASTER_ME) $(MAPCMSG_ME)))
 $(eval $(call nffw.add_link_flag,$(PROJECT),-noecc)) # required for codeshare on B0
diff --git a/firmware/apps/nic/app_config_tables.c b/firmware/apps/nic/app_config_tables.c
index 11dfa3e..01a623f 100644
--- a/firmware/apps/nic/app_config_tables.c
+++ b/firmware/apps/nic/app_config_tables.c
@@ -1066,29 +1066,33 @@ cfg_act_build_nbi(action_list_t *acts, uint32_t pcie, uint32_t vid,
     if (type != NFD_VNIC_TYPE_PF)
         return;
 
-    cfg_act_append_rx_wire(acts, pcie, vid, vxlan, nvgre,
-                           rx_csum && !csum_compl);
+    //cfg_act_append_rx_wire(acts, pcie, vid, vxlan, nvgre,
+    //                       rx_csum && !csum_compl);
+    cfg_act_append_rx_wire(acts, pcie, vid, 0, 0, 0);
 
-    if (veb_up)
-        cfg_act_append_veb_lookup(acts, pcie, vid, promisc, 1);
-    else if (! promisc)
-        cfg_act_append_dmac_match_bar(acts, pcie, vid);
+    //if (veb_up)
+    //    cfg_act_append_veb_lookup(acts, pcie, vid, promisc, 1);
+    //else if (! promisc)
+    //    cfg_act_append_dmac_match_bar(acts, pcie, vid);
 
-    if (veb_up || csum_compl)
-        cfg_act_append_checksum(acts, veb_up, veb_up, csum_compl); // O, I, C
+    //if (veb_up || csum_compl)
+    //    cfg_act_append_checksum(acts, veb_up, veb_up, csum_compl); // O, I, C
 
-    if (control & NFP_NET_CFG_CTRL_BPF)
+    if (control & NFP_NET_CFG_CTRL_BPF) {
         cfg_act_append_bpf(acts, vnic);
+    } else {
+        cfg_act_append_tx_host(acts, pcie, vid, 0, 0);
+    }
 
-    if (control & NFP_NET_CFG_CTRL_RSS_ANY || control & NFP_NET_CFG_CTRL_BPF)
-        cfg_act_append_rss(acts, pcie, vid, update_rss, rss_v1);
+    //if (control & NFP_NET_CFG_CTRL_RSS_ANY || control & NFP_NET_CFG_CTRL_BPF)
+    //    cfg_act_append_rss(acts, pcie, vid, update_rss, rss_v1);
 
-    cfg_act_append_tx_host(acts, pcie, vid, 0, veb_up);
+    //cfg_act_append_tx_host(acts, pcie, vid, 0, 0);
 
-    if (veb_up) {
-        cfg_act_append_push_pkt(acts);
-        cfg_act_append_tx_vlan(acts);
-    }
+    //if (veb_up) {
+    //    cfg_act_append_push_pkt(acts);
+    //    cfg_act_append_tx_vlan(acts);
+    //}
 
 }
 
diff --git a/firmware/apps/nic/ebpf.uc b/firmware/apps/nic/ebpf.uc
index c5314ee..d0870bf 100644
--- a/firmware/apps/nic/ebpf.uc
+++ b/firmware/apps/nic/ebpf.uc
@@ -146,26 +146,28 @@ ebpf_init_cap_finalize()
 
     pv_restore_meta_lm_ptr(_ebpf_pkt_vec)
 
-    alu[rc, --, B, ebpf_rc] // would have preferred ebpf_rc in bank B
-
-    alu[stat, EBPF_RET_STATS_MASK, AND, rc, >>EBPF_RET_STATS_PASS]
-    beq[skip_ebpf_stats#]
-        ffs[stat, stat] // would have preferred stat as an index
-        alu[stat, stat, +, NIC_STATS_QUEUE_BPF_PASS_IDX]
-        pv_stats_update(_ebpf_pkt_vec, stat, --)
-    skip_ebpf_stats#:
-
-    br_bset[rc, EBPF_RET_DROP, drop#]
-
-    pv_set_tx_flag(_ebpf_pkt_vec, BF_L(PV_TX_HOST_RX_BPF_bf))
-    pv_invalidate_cache(_ebpf_pkt_vec)
-
-    __actions_restore_t_idx()
-    br_bset[rc, EBPF_RET_PASS, actions#]
-
-    // EBF_RET_REDIR
-    pv_get_nbi_egress_channel_mapped_to_ingress(egress_q_base, _ebpf_pkt_vec)
-    pkt_io_tx_wire(_ebpf_pkt_vec, egress_q_base, egress#)
+//    alu[rc, --, B, ebpf_rc] // would have preferred ebpf_rc in bank B
+//
+//    alu[stat, EBPF_RET_STATS_MASK, AND, rc, >>EBPF_RET_STATS_PASS]
+//    beq[skip_ebpf_stats#]
+//        ffs[stat, stat] // would have preferred stat as an index
+//        alu[stat, stat, +, NIC_STATS_QUEUE_BPF_PASS_IDX]
+//        pv_stats_update(_ebpf_pkt_vec, stat, --)
+//    skip_ebpf_stats#:
+
+    pv_stats_update(_ebpf_pkt_vec, BPF_DISCARD, --)
+    br[drop#]
+//    br_bset[rc, EBPF_RET_DROP, drop#]
+//
+//    pv_set_tx_flag(_ebpf_pkt_vec, BF_L(PV_TX_HOST_RX_BPF_bf))
+//    pv_invalidate_cache(_ebpf_pkt_vec)
+//
+//    __actions_restore_t_idx()
+//    br_bset[rc, EBPF_RET_PASS, actions#]
+//
+//    // EBF_RET_REDIR
+//    pv_get_nbi_egress_channel_mapped_to_ingress(egress_q_base, _ebpf_pkt_vec)
+//    pkt_io_tx_wire(_ebpf_pkt_vec, egress_q_base, egress#)
 .end
 #endm
 
diff --git a/firmware/apps/nic/pv.uc b/firmware/apps/nic/pv.uc
index f79652d..0cedb7a 100644
--- a/firmware/apps/nic/pv.uc
+++ b/firmware/apps/nic/pv.uc
@@ -1338,14 +1338,14 @@ max_cbs#:
 
     immed[BF_A(out_vec, PV_TX_FLAGS_bf), 0]
 
-    br_bset[in_rx_args, BF_L(INSTR_RX_WIRE_CSUM_bf), propagate_csum#], defer[3]
+    //br_bset[in_rx_args, BF_L(INSTR_RX_WIRE_CSUM_bf), propagate_csum#], defer[3]
         alu[BF_A(out_vec, PV_CTM_ADDR_bf), BF_A(out_vec, PV_NUMBER_bf), AND~, BF_MASK(PV_CTM_ISL_bf), <<BF_L(PV_CTM_ISL_bf)]
         alu[BF_A(out_vec, PV_CTM_ADDR_bf), BF_A(out_vec, PV_CTM_ADDR_bf), OR, 1, <<BF_L(PV_CTM_ALLOCATED_bf)]
         ld_field[BF_A(out_vec, PV_CTM_ADDR_bf), 0011, (PKT_NBI_OFFSET + MAC_PREPEND_BYTES)]
 
 map_seq#:
     bitfield_extract__sz1(seq_ctx, BF_AML(in_nbi_desc, CAT_SEQ_CTX_bf))
-    beq[alloc_seq#] // if null sequencer, allocate new sequence number
+//    beq[alloc_seq#] // if null sequencer, allocate new sequence number
     alu[seq_ctx, seq_ctx, +, 1] // balance over GRO blocks, seq_ctx = 2/3/4/5
     alu[BF_A(out_vec, PV_SEQ_NO_bf), BF_A(in_nbi_desc, CAT_SEQ_NO_bf), OR, 0xff] ; PV_SEQ_NO_bf, PV_PROTO_bf (unkown)
 
@@ -1357,82 +1357,82 @@ fail#:
     fatal_error("INVALID CATAMARAN METADATA") // fatal error, can't safely drop without valid sequencer info
 #endif
 
-propagate_csum#:
-    immed[l4_csum_tbl, 0x238c, <<8]
-    alu[shift, (7 << 2), AND, BF_A(in_nbi_desc, MAC_PARSE_STS_bf), >>(BF_L(MAC_PARSE_STS_bf) - 2)] ; MAC_PARSE_STS_bf
-    alu[l3_csum_tbl, shift, B, 0xe0]
-    alu[l4_flags, 0xf, AND, l4_csum_tbl, >>indirect]
-    alu[shift, (3 << 1), AND, BF_A(in_nbi_desc, MAC_PARSE_L3_bf), >>(BF_L(MAC_PARSE_L3_bf) - 1)] ; MAC_PARSE_L3_bf
-    alu[BF_A(out_vec, PV_TX_HOST_L4_bf), shift, B, l4_flags, <<BF_L(PV_TX_HOST_L4_bf)] ; PV_TX_HOST_L4_bf
-    alu[l3_flags, 0x3, AND, l3_csum_tbl, >>indirect]
-    br[map_seq#], defer[1]
-        alu[BF_A(out_vec, PV_TX_HOST_L3_bf), BF_A(out_vec, PV_TX_HOST_L3_bf), OR, l3_flags, <<BF_L(PV_TX_HOST_L3_bf)] ; PV_TX_HOST_L3_bf
-
-alloc_seq#:
-    move(addr, (__pv_pkt_sequencer >> 8))
-    ov_single(OV_IMMED8, 1)
-    mem[test_add_imm, $seq, addr, <<8, 0, 1], indirect_ref, ctx_swap[sig_seq]
-    br[seek#], defer[1]
-        alu[BF_A(out_vec, PV_SEQ_NO_bf), 0xff, OR, $seq, <<16]
-
-hdr_parse#:
-    alu[parse_args, in_rx_args, AND~, 1, <<BF_L(INSTR_RX_HOST_ENCAP_bf)]
-    pv_hdr_parse(out_vec, parse_args, end#)
-
-ipv4_frag#:
-    br[finalize_l3#], defer[1]
-        ld_field[BF_A(out_vec, PV_PROTO_bf), 0001, PROTO_IPV4_FRAGMENT]
+//propagate_csum#:
+//    immed[l4_csum_tbl, 0x238c, <<8]
+//    alu[shift, (7 << 2), AND, BF_A(in_nbi_desc, MAC_PARSE_STS_bf), >>(BF_L(MAC_PARSE_STS_bf) - 2)] ; MAC_PARSE_STS_bf
+//    alu[l3_csum_tbl, shift, B, 0xe0]
+//    alu[l4_flags, 0xf, AND, l4_csum_tbl, >>indirect]
+//    alu[shift, (3 << 1), AND, BF_A(in_nbi_desc, MAC_PARSE_L3_bf), >>(BF_L(MAC_PARSE_L3_bf) - 1)] ; MAC_PARSE_L3_bf
+//    alu[BF_A(out_vec, PV_TX_HOST_L4_bf), shift, B, l4_flags, <<BF_L(PV_TX_HOST_L4_bf)] ; PV_TX_HOST_L4_bf
+//    alu[l3_flags, 0x3, AND, l3_csum_tbl, >>indirect]
+//    br[map_seq#], defer[1]
+//        alu[BF_A(out_vec, PV_TX_HOST_L3_bf), BF_A(out_vec, PV_TX_HOST_L3_bf), OR, l3_flags, <<BF_L(PV_TX_HOST_L3_bf)] ; PV_TX_HOST_L3_bf
+
+//alloc_seq#:
+//    move(addr, (__pv_pkt_sequencer >> 8))
+//    ov_single(OV_IMMED8, 1)
+//    mem[test_add_imm, $seq, addr, <<8, 0, 1], indirect_ref, ctx_swap[sig_seq]
+//    br[seek#], defer[1]
+//        alu[BF_A(out_vec, PV_SEQ_NO_bf), 0xff, OR, $seq, <<16]
+
+//hdr_parse#:
+//    alu[parse_args, in_rx_args, AND~, 1, <<BF_L(INSTR_RX_HOST_ENCAP_bf)]
+//    pv_hdr_parse(out_vec, parse_args, end#)
+
+//ipv4_frag#:
+//    br[finalize_l3#], defer[1]
+//        ld_field[BF_A(out_vec, PV_PROTO_bf), 0001, PROTO_IPV4_FRAGMENT]
 
 read_pkt#:
-    __pv_get_mac_dst_type(mac_dst_type, out_vec) // advances *$index by 2 words
-    alu[vlan_len, (3 << 2), AND, BF_A(in_nbi_desc, MAC_PARSE_VLAN_bf), >>(BF_L(MAC_PARSE_VLAN_bf) - 2)]
-    beq[skip_vlan#], defer[3]
-        alu[BF_A(out_vec, PV_MAC_DST_TYPE_bf), BF_A(out_vec, PV_MAC_DST_TYPE_bf), OR, mac_dst_type, <<BF_L(PV_MAC_DST_TYPE_bf)] ; PV_MAC_DST_TYPE_bf
-        alu[BF_A(out_vec, PV_META_TYPES_bf), *$index++, B, 0] ; PV_META_TYPES_bf
-        immed[vlan_id, NULL_VLAN]
-
-    alu[--, *$index++, OR, 0]
-    alu[vlan_id, --, B, *$index--, >>16]
-
-skip_vlan#:
-    bitfield_extract__sz1(l3_type, BF_AML(in_nbi_desc, CAT_L3_CLASS_bf)) ; CAT_L3_CLASS_bf
-    br!=byte[l3_type, 0, 4, hdr_parse#], defer[2] // if packet is not IPv4 perform parse
-        bits_set__sz1(BF_AL(out_vec, PV_VLAN_ID_bf), vlan_id) ; PV_VLAN_ID_bf
-        passert(BF_L(PV_SEQ_CTX_bf), "EQ", 8)
-        ld_field[BF_A(out_vec, PV_SEQ_CTX_bf), 0010, seq_ctx, <<BF_L(PV_SEQ_CTX_bf)]
-
-    // packet is IPv4, classify fragments
-    br_bset[BF_AL(in_nbi_desc, CAT_V4_FRAG_bf), ipv4_frag#], defer[3]
-        bitfield_extract__sz1(l3_offset, BF_AML(in_nbi_desc, CAT_L3_OFFSET_bf)) ; CAT_L3_OFFSET_bf
-        alu[l3_offset, l3_offset, -, MAC_PREPEND_BYTES]
-        alu[BF_A(out_vec, PV_HEADER_STACK_bf), --, B, l3_offset, <<BF_L(PV_HEADER_OFFSET_INNER_IP_bf)]
-
-    // packet is IPv4, deep parse if NVGRE is configured
-    br_bset[in_rx_args, BF_L(INSTR_RX_PARSE_NVGRE_bf), hdr_parse#]
-
-    // packet is IPv4, deep parse if not TCP or UDP
-    alu[l4_type, 0xe, AND, BF_A(in_nbi_desc, CAT_L4_CLASS_bf), >>BF_L(CAT_L4_CLASS_bf)] ; CAT_L4_CLASS_bf
-    br!=byte[l4_type, 0, 2, hdr_parse#]
-
-    // deep parse if UDP tunnels are possible and configured
-    alu[tunnel, in_rx_args, AND, ((BF_MASK(INSTR_RX_PARSE_VXLANS_bf) << BF_L(INSTR_RX_PARSE_VXLANS_bf)) | (1 << BF_L(INSTR_RX_PARSE_GENEVE_bf)))]
-    alu[tunnel, 0, -, tunnel]
-    alu[tunnel, tunnel, AND~, BF_A(in_nbi_desc, CAT_L4_CLASS_bf)]
-    br_bset[tunnel, BF_L(CAT_L4_CLASS_bf), hdr_parse#] ; CAT_L4_CLASS_bf
-
-    // set PV_PROTO_bf to IPv4 according to L4 protocol
-    alu[BF_A(out_vec, PV_PROTO_bf), BF_A(out_vec, PV_PROTO_bf), AND~, 0xfc] ; PV_PROTO_bf
-    alu[l4_tcp, 1, AND, BF_A(in_nbi_desc, CAT_L4_CLASS_bf), >>BF_L(CAT_L4_CLASS_bf)] ; CAT_L4_CLASS_bf
-    alu[BF_A(out_vec, PV_PROTO_bf), BF_A(out_vec, PV_PROTO_bf), AND~, l4_tcp] ; PV_PROTO_bf
-
-    // store header offsets
-    bitfield_extract__sz1(l4_offset, BF_AML(in_nbi_desc, CAT_L4_OFFSET_bf)) ; CAT_L4_OFFSET_bf
-    alu[l4_offset, l4_offset, -, MAC_PREPEND_BYTES]
-    alu[BF_A(out_vec, PV_HEADER_STACK_bf), BF_A(out_vec, PV_HEADER_STACK_bf), OR, l4_offset, <<BF_L(PV_HEADER_OFFSET_INNER_L4_bf)]
-    alu[BF_A(out_vec, PV_HEADER_STACK_bf), BF_A(out_vec, PV_HEADER_STACK_bf), OR, l4_offset, <<BF_L(PV_HEADER_OFFSET_OUTER_L4_bf)]
-
-finalize_l3#:
-    alu[BF_A(out_vec, PV_HEADER_STACK_bf), BF_A(out_vec, PV_HEADER_STACK_bf), OR, l3_offset, <<BF_L(PV_HEADER_OFFSET_OUTER_IP_bf)]
+//    __pv_get_mac_dst_type(mac_dst_type, out_vec) // advances *$index by 2 words
+//    alu[vlan_len, (3 << 2), AND, BF_A(in_nbi_desc, MAC_PARSE_VLAN_bf), >>(BF_L(MAC_PARSE_VLAN_bf) - 2)]
+//    beq[skip_vlan#], defer[3]
+//        alu[BF_A(out_vec, PV_MAC_DST_TYPE_bf), BF_A(out_vec, PV_MAC_DST_TYPE_bf), OR, mac_dst_type, <<BF_L(PV_MAC_DST_TYPE_bf)] ; PV_MAC_DST_TYPE_bf
+//        alu[BF_A(out_vec, PV_META_TYPES_bf), *$index++, B, 0] ; PV_META_TYPES_bf
+//        immed[vlan_id, NULL_VLAN]
+//
+//    alu[--, *$index++, OR, 0]
+//    alu[vlan_id, --, B, *$index--, >>16]
+//
+//skip_vlan#:
+//    bitfield_extract__sz1(l3_type, BF_AML(in_nbi_desc, CAT_L3_CLASS_bf)) ; CAT_L3_CLASS_bf
+//    br!=byte[l3_type, 0, 4, hdr_parse#], defer[2] // if packet is not IPv4 perform parse
+//        bits_set__sz1(BF_AL(out_vec, PV_VLAN_ID_bf), vlan_id) ; PV_VLAN_ID_bf
+//        passert(BF_L(PV_SEQ_CTX_bf), "EQ", 8)
+//        ld_field[BF_A(out_vec, PV_SEQ_CTX_bf), 0010, seq_ctx, <<BF_L(PV_SEQ_CTX_bf)]
+//
+//    // packet is IPv4, classify fragments
+//    br_bset[BF_AL(in_nbi_desc, CAT_V4_FRAG_bf), ipv4_frag#], defer[3]
+//        bitfield_extract__sz1(l3_offset, BF_AML(in_nbi_desc, CAT_L3_OFFSET_bf)) ; CAT_L3_OFFSET_bf
+//        alu[l3_offset, l3_offset, -, MAC_PREPEND_BYTES]
+//        alu[BF_A(out_vec, PV_HEADER_STACK_bf), --, B, l3_offset, <<BF_L(PV_HEADER_OFFSET_INNER_IP_bf)]
+//
+//    // packet is IPv4, deep parse if NVGRE is configured
+//    br_bset[in_rx_args, BF_L(INSTR_RX_PARSE_NVGRE_bf), hdr_parse#]
+//
+//    // packet is IPv4, deep parse if not TCP or UDP
+//    alu[l4_type, 0xe, AND, BF_A(in_nbi_desc, CAT_L4_CLASS_bf), >>BF_L(CAT_L4_CLASS_bf)] ; CAT_L4_CLASS_bf
+//    br!=byte[l4_type, 0, 2, hdr_parse#]
+//
+//    // deep parse if UDP tunnels are possible and configured
+//    alu[tunnel, in_rx_args, AND, ((BF_MASK(INSTR_RX_PARSE_VXLANS_bf) << BF_L(INSTR_RX_PARSE_VXLANS_bf)) | (1 << BF_L(INSTR_RX_PARSE_GENEVE_bf)))]
+//    alu[tunnel, 0, -, tunnel]
+//    alu[tunnel, tunnel, AND~, BF_A(in_nbi_desc, CAT_L4_CLASS_bf)]
+//    br_bset[tunnel, BF_L(CAT_L4_CLASS_bf), hdr_parse#] ; CAT_L4_CLASS_bf
+//
+//    // set PV_PROTO_bf to IPv4 according to L4 protocol
+//    alu[BF_A(out_vec, PV_PROTO_bf), BF_A(out_vec, PV_PROTO_bf), AND~, 0xfc] ; PV_PROTO_bf
+//    alu[l4_tcp, 1, AND, BF_A(in_nbi_desc, CAT_L4_CLASS_bf), >>BF_L(CAT_L4_CLASS_bf)] ; CAT_L4_CLASS_bf
+//    alu[BF_A(out_vec, PV_PROTO_bf), BF_A(out_vec, PV_PROTO_bf), AND~, l4_tcp] ; PV_PROTO_bf
+//
+//    // store header offsets
+//    bitfield_extract__sz1(l4_offset, BF_AML(in_nbi_desc, CAT_L4_OFFSET_bf)) ; CAT_L4_OFFSET_bf
+//    alu[l4_offset, l4_offset, -, MAC_PREPEND_BYTES]
+//    alu[BF_A(out_vec, PV_HEADER_STACK_bf), BF_A(out_vec, PV_HEADER_STACK_bf), OR, l4_offset, <<BF_L(PV_HEADER_OFFSET_INNER_L4_bf)]
+//    alu[BF_A(out_vec, PV_HEADER_STACK_bf), BF_A(out_vec, PV_HEADER_STACK_bf), OR, l4_offset, <<BF_L(PV_HEADER_OFFSET_OUTER_L4_bf)]
+//
+//finalize_l3#:
+//    alu[BF_A(out_vec, PV_HEADER_STACK_bf), BF_A(out_vec, PV_HEADER_STACK_bf), OR, l3_offset, <<BF_L(PV_HEADER_OFFSET_OUTER_IP_bf)]
 
 end#:
 .end
-- 
2.25.1

